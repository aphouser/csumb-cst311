from socket import *
from socket import socket
import threading
#import concurrent.futures
import time

class ClientThreads:
    def __init__(self):
        self.message = list()
        self._lock = threading.Lock()

    def update(self, index):
        connectionSocket, addr = serverSocket.accept()  # connect to client
        sockets.append(connectionSocket)                # list of clients
        sentence = connectionSocket.recv(1024).decode() # from client sentence is either Client X: Alice or Client Y: Bob

        with self._lock:
            local_message = self.message                # initially an empty list
            local_message.append(sentence)              # append the sentence from the client
            self.message = local_message                # store the updated list in self.message list

        #SO I CAN GET THE SERVER TO OUTPUT THE LIST HERE
        #THIS INDICATES TO ME THAT WE HAVE NO EXITED THIS FUNCTION YET
        print(self.message)

        #SEEMS LIKE WE SHOULD BE ABLE TO HAVE AN IF STATEMENT HERE
        if len(self.message) == 2:
            print(self.message[1] + ' received  before ' + self.message[2])

if __name__ == "__main__":
    ### START SERVER SETUP
    #Assign TCP port number
    serverPort = 12000

    # Create a TCP socket
    # Notice the use of SOCK_STREAM for TCP packets
    serverSocket = socket(AF_INET,SOCK_STREAM)

    #Assign IP address and port number to socket
    serverSocket.bind(('',serverPort))
    serverSocket.listen(1)
    print('The server is ready to receive')
    ### END SERVER SETUP

while True:
    numClients = 2
    sockets = list()
    client = ClientThreads()

    with concurrent.futures.ThreadPoolExecutor(max_workers=numClients) as executor:
        for index in range(numClients):
            executor.submit(client.update, index)

    for i in sockets:
        for j in range(0, len(client.message)-1):
            returnSentence = client.message[j] + " received before " + client.message[j+1]
            i.send(returnSentence.encode())
        i.close()
    print(returnSentence)

#BELOW STILL WORKS FINE IF UNCOMMENTED
#I JUST FEEL LIKE WE SHOULD BE ABLE TO USE client.message[i] to construct the message
#SO THAT IF WE HAD MORE THAN TO CLIENTS IT WOULD STILL WORK
#SOMETHING LIKE
#client.message[1] + 'arrived before' + client.message[2] + 'arrived before' + client.message[3]
"""
    for i in sockets:
        if client.message[0] == "Client X: Alice":
            returnSentence = "X: Alice received before Y: Bob"
        elif client.message[0] == "Client Y: Bob":
            returnSentence = "Y: Bob received before X: Alice"
        else:
            returnSentence = "Something weird happened"
        i.send(returnSentence.encode())
        i.close()
    print(returnSentence)
"""
